<html>

<head>
<title>SQL As Understood By SQLite</title>

<style>
<!--
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
h1
	{margin-right:0in;
	margin-left:0in;
	font-size:24.0pt;
	font-family:"Times New Roman";
	font-weight:bold;}
h2
	{margin-right:0in;
	margin-left:0in;
	font-size:18.0pt;
	font-family:"Times New Roman";
	font-weight:bold;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:blue;
	text-decoration:underline;}
p
	{margin-right:0in;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Times New Roman";}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>

</head>

<body lang=EN-US link=blue vlink=blue>

<div class=Section1>

<h2>SQL As Understood By SQLite</h2>

<p>[This information is courtesy <a href="http://www.sqlite.org/">www.sqlite.org</a>.
It has been slightly edited for clarity and purpose as supplemental information
for the SQL Database Object MMF Extension.]</p>

<p>The SQLite library understands most of the standard SQL language. But it
does <a href="omitted.htm">omit some features</a> while at the same time adding
a few features of its own. This document attempts to describe precisely what
parts of the SQL language SQLite does and does not support. A list of <a
href="#keywords">keywords</a> is given at the end.</p>

<p>In all of the syntax diagrams that follow, literal text is shown in bold
blue. Non-terminal symbols are shown in italic red. Operators that are part of
the syntactic markup itself are shown in black roman.</p>

<p>This document provides an overview of the SQL syntax implemented by SQLite. 
The MMF SQL Database Object embeds version 2.8.15 of the SQLite engine.</p>

<p>SQLite implements the follow syntax:</p>

<ul type=disc>
 <li class=MsoNormal><a href="#attach">ATTACH DATABASE</a> </li>
 <li class=MsoNormal><a href="#transaction">BEGIN TRANSACTION</a> </li>
 <li class=MsoNormal><a href="#comment">comment</a> </li>
 <li class=MsoNormal><a href="#transaction">COMMIT TRANSACTION</a> </li>
 <li class=MsoNormal><a href="#copy">COPY</a> </li>
 <li class=MsoNormal><a href="#createindex">CREATE INDEX</a> </li>
 <li class=MsoNormal><a href="#createtable">CREATE TABLE</a> </li>
 <li class=MsoNormal><a href="#createtrigger">CREATE TRIGGER</a> </li>
 <li class=MsoNormal><a href="#createview">CREATE VIEW</a> </li>
 <li class=MsoNormal><a href="#delete">DELETE</a> </li>
 <li class=MsoNormal><a href="#detach">DETACH DATABASE</a> </li>
 <li class=MsoNormal><a href="#dropindex">DROP INDEX</a> </li>
 <li class=MsoNormal><a href="#droptable">DROP TABLE</a> </li>
 <li class=MsoNormal><a href="#droptrigger">DROP TRIGGER</a> </li>
 <li class=MsoNormal><a href="#dropview">DROP VIEW</a> </li>
 <li class=MsoNormal><a href="#transaction">END TRANSACTION</a> </li>
 <li class=MsoNormal><a href="#expr">expression</a> </li>
 <li class=MsoNormal><a href="#insert">INSERT</a> </li>
 <li class=MsoNormal><a href="#conflict">ON CONFLICT clause</a> </li>
 <li class=MsoNormal><a href="#replace">REPLACE</a> </li>
 <li class=MsoNormal><a href="#transaction">ROLLBACK TRANSACTION</a> </li>
 <li class=MsoNormal><a href="#select">SELECT</a> </li>
 <li class=MsoNormal><a href="#update">UPDATE</a> </li>
 <li class=MsoNormal><a href="#vacuum">VACUUM</a> </li>
</ul>

<p>Details on the implementation of each command are provided in the remainder
of this document.</p>

<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<h1><a name=attach></a>ATTACH DATABASE</h1>

<table class=MsoNormalTable border=0 cellpadding=0>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>sql-statement</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='color:#2C2CF0'>ATTACH </span></b>[<b><span
  style='color:#2C2CF0'>DATABASE</span></b>]<b><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>database-filename</span></i><b><span style='color:#2C2CF0'>
  AS </span></b><i><span style='color:#FF3434'>database-name</span></i></p>
  </td>
 </tr>
</table>

<p>The ATTACH DATABASE statement adds a preexisting database file to the
current database connection. If the filename contains punctuation characters it
must be quoted. The names 'main' and 'temp' refer to the main database and the
database used for temporary tables. These cannot be detached. Attached
databases are removed using the <a href="#detach">DETACH DATABASE</a>
statement.</p>

<p>You can read from and write to an attached database but schema changes to
attached databases are not allowed.</p>

<p>You cannot create a new table with the same name as a table in an attached
database, but you can attach a database which contains tables whose names are
duplicates of tables in the main database. It is also permissible to attach the
same database file multiple times.</p>

<p>Tables in an attached database can be referred to using the syntax <i>database-name.table-name</i>.
If an attached table doesn't have a duplicate table name in the main database,
it doesn't require a database name prefix. When a database is attached, all of
its tables which don't have duplicate names become the 'default' table of that
name. Any tables of that name attached afterwards require the table prefix. If
the 'default' table of a given name is detached, then the last table of that
name attached becomes the new default.</p>

<p>Transactions involving multiple attached databases are atomic, assuming that
the main database is not &quot;:memory:&quot;. If the main database is
&quot;:memory:&quot; then transactions continue to be atomic within each
individual database file. But if the host computer crashes in the middle of a
COMMIT where two or more database files are updated, some of those files might
get the changes where others might not. In SQLite version 2.8, all commits to
attached databases behaved as if the main database were &quot;:memory:&quot;. </p>

<p>There is a compile-time limit of 10 attached database files.</p>

<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<h1><a name=transaction></a>BEGIN TRANSACTION</h1>

<table class=MsoNormalTable border=0 cellpadding=0>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>sql-statement</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='color:#2C2CF0'>BEGIN </span></b>[<b><span
  style='color:#2C2CF0'> DEFERRED </span></b><span style='font-size:13.5pt'>|</span><b><span
  style='color:#2C2CF0'> IMMEDIATE </span></b><span style='font-size:13.5pt'>|</span><b><span
  style='color:#2C2CF0'> EXCLUSIVE </span></b>]<b><span style='color:#2C2CF0'> </span></b>[<b><span
  style='color:#2C2CF0'>TRANSACTION </span></b>[<i><span style='color:#FF3434'>name</span></i>]]</p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span style='display:none'>&nbsp;</span></p>

<table class=MsoNormalTable border=0 cellpadding=0>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>sql-statement</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='color:#2C2CF0'>END </span></b>[<b><span
  style='color:#2C2CF0'>TRANSACTION </span></b>[<i><span style='color:#FF3434'>name</span></i>]]</p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span style='display:none'>&nbsp;</span></p>

<table class=MsoNormalTable border=0 cellpadding=0>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>sql-statement</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='color:#2C2CF0'>COMMIT </span></b>[<b><span
  style='color:#2C2CF0'>TRANSACTION </span></b>[<i><span style='color:#FF3434'>name</span></i>]]</p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span style='display:none'>&nbsp;</span></p>

<table class=MsoNormalTable border=0 cellpadding=0>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>sql-statement</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='color:#2C2CF0'>ROLLBACK </span></b>[<b><span
  style='color:#2C2CF0'>TRANSACTION </span></b>[<i><span style='color:#FF3434'>name</span></i>]]</p>
  </td>
 </tr>
</table>

<p>Beginning in version 2.0, SQLite supports transactions with rollback and
atomic commit.</p>

<p>The optional transaction name is ignored. SQLite currently does not allow nested
transactions.</p>

<p>No changes can be made to the database except within a transaction. Any
command that changes the database (basically, any SQL command other than
SELECT) will automatically start a transaction if one is not already in effect.
Automatically started transactions are committed at the conclusion of the
command. </p>

<p>Transactions can be started manually using the BEGIN command. Such
transactions usually persist until the next COMMIT or ROLLBACK command. But a
transaction will also ROLLBACK if the database is closed or if an error occurs
and the ROLLBACK conflict resolution algorithm is specified. See the
documentation on the <a href="#conflict">ON CONFLICT</a> clause for additional
information about the ROLLBACK conflict resolution algorithm. </p>

<p>For SQLite version 2.8 and earlier, all transactions are exclusive. </p>

<p>The COMMIT command does not actually perform a commit until all pending SQL
commands finish. Thus if two or more SELECT statements are in the middle of
processing and a COMMIT is executed, the commit will not actually occur until
all SELECT statements finish. </p>

<p>An attempt to execute COMMIT might result in an SQLITE_BUSY return code.
This indicates that another thread or process had a read lock on the database
that prevented the database from being updated. When COMMIT fails in this way,
the transaction remains active and the COMMIT can be retried later after the
reader has had a chance to clear. </p>

<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<h1><a name=comment></a>comment</h1>

<table class=MsoNormalTable border=0 cellpadding=0>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>comment</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><i><span style='color:#FF3434'>SQL-comment</span></i><b><span
  style='color:#2C2CF0'> </span></b><span style='font-size:13.5pt'>|</span><b><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>C-comment</span></i></p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>SQL-comment</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='color:#2C2CF0'>-- </span></b><i><span
  style='color:#FF3434'>single-line</span></i></p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>C-comment</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='color:#2C2CF0'>/</span></b><b><span
  style='font-size:13.5pt;color:#2C2CF0'>*</span><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>multiple-lines</span></i><b><span style='color:#2C2CF0'>
  </span></b>[<b><span style='font-size:13.5pt;color:#2C2CF0'>*</span><span
  style='color:#2C2CF0'>/</span></b>]</p>
  </td>
 </tr>
</table>

<p>Comments aren't SQL commands, but can occur in SQL queries. They are treated
as whitespace by the parser. They can begin anywhere whitespace can be found,
including inside expressions that span multiple lines. </p>

<p>SQL comments only extend to the end of the current line.</p>

<p>C comments can span any number of lines. If there is no terminating
delimiter, they extend to the end of the input. This is not treated as an
error. A new SQL statement can begin on a line after a multiline comment ends.
C comments can be embedded anywhere whitespace can occur, including inside
expressions, and in the middle of other SQL statements. C comments do not nest.
SQL comments inside a C comment will be ignored. </p>

<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<h1><a name=copy></a>COPY</h1>

<table class=MsoNormalTable border=0 cellpadding=0>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>sql-statement</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='color:#2C2CF0'>COPY</span></b><b><span
  style='color:#2C2CF0'> </span></b>[<b><span style='color:#2C2CF0'> OR </span></b><i><span
  style='color:#FF3434'>conflict-algorithm</span></i><b><span style='color:
  #2C2CF0'> </span></b>]<b><span style='color:#2C2CF0'> </span></b>[<i><span
  style='color:#FF3434'>database-name</span></i><b><span style='color:#2C2CF0'>
  </span></b><b><span style='font-size:13.5pt;color:#2C2CF0'>.</span></b>]<b><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>table-name</span></i><b><span
  style='color:#2C2CF0'> FROM </span></b><i><span style='color:#FF3434'>filename</span></i><b><span
  style='color:#2C2CF0'><br>
  </span></b>[<b><span style='color:#2C2CF0'> USING DELIMITERS </span></b><i><span
  style='color:#FF3434'>delim</span></i><b><span style='color:#2C2CF0'> </span></b>]</p>
  </td>
 </tr>
</table>

<p>The COPY command is an extension used to load large amounts of data into a
table. It is modeled after a similar command found in PostgreSQL. In fact, the
SQLite COPY command is specifically designed to be able to read the output of
the PostgreSQL dump utility <b>pg_dump</b> so that data can be easily
transferred from PostgreSQL into SQLite.</p>

<p>The table-name is the name of an existing table which is to be filled with
data. The filename is a string or identifier that names a file from which data
will be read. The filename can be the <b>STDIN</b> to read data from standard
input.</p>

<p>Each line of the input file is converted into a single record in the table.
Columns are separated by tabs. If a tab occurs as data within a column, then
that tab is preceded by a baskslash &quot;\&quot; character. A baskslash in the
data appears as two backslashes in a row. The optional USING DELIMITERS clause
can specify a delimiter other than tab.</p>

<p>If a column consists of the character &quot;\N&quot;, that column is filled
with the value NULL.</p>

<p>The optional conflict-clause allows the specification of an alternative constraint
conflict resolution algorithm to use for this one command. See the section
titled <a href="#conflict">ON CONFLICT</a> for additional information.</p>

<p>When the input data source is STDIN, the input can be terminated by a line
that contains only a baskslash and a dot: &quot;<span style='font-size:13.5pt;
color:#2C2CF0'>\.</span>&quot;.</p>

<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<h1><a name=createindex></a>CREATE INDEX</h1>

<table class=MsoNormalTable border=0 cellpadding=0>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>sql-statement</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='color:#2C2CF0'>CREATE </span></b>[<b><span
  style='color:#2C2CF0'>UNIQUE</span></b>]<b><span style='color:#2C2CF0'> INDEX
  </span></b><i><span style='color:#FF3434'>index-name</span></i><b><span
  style='color:#2C2CF0'> <br>
  ON </span></b>[<i><span style='color:#FF3434'>database-name</span></i><b><span
  style='color:#2C2CF0'> </span></b><b><span style='font-size:13.5pt;
  color:#2C2CF0'>.</span></b>]<b><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>table-name</span></i><b><span style='color:#2C2CF0'> </span></b><b><span
  style='font-size:13.5pt;color:#2C2CF0'>(</span><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>column-name</span></i><b><span style='color:#2C2CF0'> </span></b>[<b><span
  style='font-size:13.5pt;color:#2C2CF0'>,</span><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>column-name</span></i>]<span style='font-size:13.5pt'>*</span><b><span
  style='color:#2C2CF0'> </span></b><b><span style='font-size:13.5pt;
  color:#2C2CF0'>)</span><span style='color:#2C2CF0'><br>
  </span></b>[<b><span style='color:#2C2CF0'> ON CONFLICT </span></b><i><span
  style='color:#FF3434'>conflict-algorithm</span></i><b><span style='color:
  #2C2CF0'> </span></b>]</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>column-name</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><i><span style='color:#FF3434'>name</span></i><b><span
  style='color:#2C2CF0'> </span></b>[<b><span style='color:#2C2CF0'> COLLATE </span></b><i><span
  style='color:#FF3434'>collation-name</span></i>]<b><span style='color:#2C2CF0'>
  </span></b>[<b><span style='color:#2C2CF0'> ASC </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'> DESC </span></b>]</p>
  </td>
 </tr>
</table>

<p>The CREATE INDEX command consists of the keywords &quot;CREATE INDEX&quot;
followed by the name of the new index, the keyword &quot;ON&quot;, the name of
a previously created table that is to be indexed, and a parenthesized list of names
of columns in the table that are used for the index key. Each column name can
be followed by one of the &quot;ASC&quot; or &quot;DESC&quot; keywords to
indicate sort order, but the sort order is ignored in the current
implementation. Sorting is always done in ascending order.</p>

<p>The COLLATE clause following each column name defines a collating sequence
used for text entires in that column. The default collating sequence is the
collating sequence defined for that column in the CREATE TABLE statement. Or if
no collating sequence is otherwise defined, the built-in BINARY collating
sequence is used.</p>

<p>There are no arbitrary limits on the number of indices that can be attached
to a single table, nor on the number of columns in an index.</p>

<p>If the UNIQUE keyword appears between CREATE and INDEX then duplicate index
entries are not allowed. Any attempt to insert a duplicate entry will result in
an error.</p>

<p>The optional conflict-clause allows the specification of an alternative
default constraint conflict resolution algorithm for this index. This only
makes sense if the UNIQUE keyword is used since otherwise there are not
constraints on the index. The default algorithm is ABORT. If a COPY, INSERT, or
UPDATE statement specifies a particular conflict resolution algorithm, that
algorithm is used in place of the default algorithm specified here. See the
section titled <a href="#conflict">ON CONFLICT</a> for additional information.</p>

<p>The exact text of each CREATE INDEX statement is stored in the <b>sqlite_master</b>
or <b>sqlite_temp_master</b> table, depending on whether the table being
indexed is temporary. Every time the database is opened, all CREATE INDEX
statements are read from the <b>sqlite_master</b> table and used to regenerate
SQLite's internal representation of the index layout.</p>

<p>Indexes are removed with the <a href="#dropindex">DROP INDEX</a> command.</p>

<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<h1><a name=createtable></a>CREATE TABLE</h1>

<table class=MsoNormalTable border=0 cellpadding=0>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>sql-command</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='color:#2C2CF0'>CREATE </span></b>[<b><span
  style='color:#2C2CF0'>TEMP </span></b><span style='font-size:13.5pt'>|</span><b><span
  style='color:#2C2CF0'> TEMPORARY</span></b>]<b><span style='color:#2C2CF0'>
  TABLE </span></b><i><span style='color:#FF3434'>table-name</span></i><b><span
  style='color:#2C2CF0'> </span></b><b><span style='font-size:13.5pt;
  color:#2C2CF0'>(</span><span style='color:#2C2CF0'><br>
  &nbsp;&nbsp;&nbsp;&nbsp;</span></b><i><span style='color:#FF3434'>column-def</span></i><b><span
  style='color:#2C2CF0'> </span></b>[<b><span style='font-size:13.5pt;
  color:#2C2CF0'>,</span><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>column-def</span></i>]<span style='font-size:13.5pt'>*</span><b><span
  style='color:#2C2CF0'><br>
  &nbsp;&nbsp;&nbsp;&nbsp;</span></b>[<b><span style='font-size:13.5pt;
  color:#2C2CF0'>,</span><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>constraint</span></i>]<span style='font-size:13.5pt'>*</span><b><span
  style='color:#2C2CF0'><br>
  </span></b><b><span style='font-size:13.5pt;color:#2C2CF0'>)</span></b></p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>sql-command</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='color:#2C2CF0'>CREATE </span></b>[<b><span
  style='color:#2C2CF0'>TEMP </span></b><span style='font-size:13.5pt'>|</span><b><span
  style='color:#2C2CF0'> TEMPORARY</span></b>]<b><span style='color:#2C2CF0'>
  TABLE </span></b>[<i><span style='color:#FF3434'>database-name</span></i><b><span
  style='font-size:13.5pt;color:#2C2CF0'>.</span></b>]<b><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>table-name</span></i><b><span
  style='color:#2C2CF0'> AS </span></b><i><span style='color:#FF3434'>select-statement</span></i></p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>column-def</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><i><span style='color:#FF3434'>name</span></i><b><span
  style='color:#2C2CF0'> </span></b>[<i><span style='color:#FF3434'>type</span></i>]<b><span
  style='color:#2C2CF0'> </span></b>[[<b><span style='color:#2C2CF0'>CONSTRAINT
  </span></b><i><span style='color:#FF3434'>name</span></i>]<b><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>column-constraint</span></i>]<span
  style='font-size:13.5pt'>*</span></p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>type</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><i><span style='color:#FF3434'>typename</span></i><b><span
  style='color:#2C2CF0'> </span></b><span style='font-size:13.5pt'>|</span><b><span
  style='color:#2C2CF0'><br>
  </span></b><i><span style='color:#FF3434'>typename</span></i><b><span
  style='color:#2C2CF0'> </span></b><b><span style='font-size:13.5pt;
  color:#2C2CF0'>(</span><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>number</span></i><b><span style='color:#2C2CF0'> </span></b><b><span
  style='font-size:13.5pt;color:#2C2CF0'>)</span><span style='color:#2C2CF0'> </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'><br>
  </span></b><i><span style='color:#FF3434'>typename</span></i><b><span
  style='color:#2C2CF0'> </span></b><b><span style='font-size:13.5pt;
  color:#2C2CF0'>(</span><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>number</span></i><b><span style='color:#2C2CF0'> </span></b><b><span
  style='font-size:13.5pt;color:#2C2CF0'>,</span><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>number</span></i><b><span style='color:#2C2CF0'> </span></b><b><span
  style='font-size:13.5pt;color:#2C2CF0'>)</span></b></p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>column-constraint</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='color:#2C2CF0'>NOT NULL </span></b>[<b><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>conflict-clause</span></i><b><span
  style='color:#2C2CF0'> </span></b>]<b><span style='color:#2C2CF0'> </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'><br>
  PRIMARY KEY </span></b>[<i><span style='color:#FF3434'>sort-order</span></i>]<b><span
  style='color:#2C2CF0'> </span></b>[<b><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>conflict-clause</span></i><b><span style='color:#2C2CF0'>
  </span></b>]<b><span style='color:#2C2CF0'> </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'><br>
  UNIQUE </span></b>[<b><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>conflict-clause</span></i><b><span style='color:#2C2CF0'>
  </span></b>]<b><span style='color:#2C2CF0'> </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'><br>
  CHECK </span></b><b><span style='font-size:13.5pt;color:#2C2CF0'>(</span><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>expr</span></i><b><span
  style='color:#2C2CF0'> </span></b><b><span style='font-size:13.5pt;
  color:#2C2CF0'>)</span><span style='color:#2C2CF0'> </span></b>[<b><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>conflict-clause</span></i><b><span
  style='color:#2C2CF0'> </span></b>]<b><span style='color:#2C2CF0'> </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'><br>
  DEFAULT </span></b><i><span style='color:#FF3434'>value</span></i><b><span
  style='color:#2C2CF0'> </span></b><span style='font-size:13.5pt'>|</span><b><span
  style='color:#2C2CF0'><br>
  COLLATE </span></b><i><span style='color:#FF3434'>collation-name</span></i></p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>constraint</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='color:#2C2CF0'>PRIMARY KEY </span></b><b><span
  style='font-size:13.5pt;color:#2C2CF0'>(</span><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>column-list</span></i><b><span style='color:#2C2CF0'> </span></b><b><span
  style='font-size:13.5pt;color:#2C2CF0'>)</span><span style='color:#2C2CF0'> </span></b>[<b><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>conflict-clause</span></i><b><span
  style='color:#2C2CF0'> </span></b>]<b><span style='color:#2C2CF0'> </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'><br>
  UNIQUE </span></b><b><span style='font-size:13.5pt;color:#2C2CF0'>(</span><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>column-list</span></i><b><span
  style='color:#2C2CF0'> </span></b><b><span style='font-size:13.5pt;
  color:#2C2CF0'>)</span><span style='color:#2C2CF0'> </span></b>[<b><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>conflict-clause</span></i><b><span
  style='color:#2C2CF0'> </span></b>]<b><span style='color:#2C2CF0'> </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'><br>
  CHECK </span></b><b><span style='font-size:13.5pt;color:#2C2CF0'>(</span><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>expr</span></i><b><span
  style='color:#2C2CF0'> </span></b><b><span style='font-size:13.5pt;
  color:#2C2CF0'>)</span><span style='color:#2C2CF0'> </span></b>[<b><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>conflict-clause</span></i><b><span
  style='color:#2C2CF0'> </span></b>]</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>conflict-clause</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='color:#2C2CF0'>ON CONFLICT </span></b><i><span
  style='color:#FF3434'>conflict-algorithm</span></i></p>
  </td>
 </tr>
</table>

<p>A CREATE TABLE statement is basically the keywords &quot;CREATE TABLE&quot;
followed by the name of a new table and a parenthesized list of column definitions
and constraints. The table name can be either an identifier or a string. Tables
names that begin with &quot;<b>sqlite_</b>&quot; are reserved for use by the
engine.</p>

<p>Each column definition is the name of the column followed by the datatype
for that column, then one or more optional column constraints. The datatype for
the column does not restrict what data may be put in that column. The UNIQUE
constraint causes an index to be created on the specified columns. This index
must contain unique keys. The COLLATE clause specifies what text <a
href="http://www.sqlite.org/datatype3.html#collation">collating function</a> to
use when comparing text entries for the column. The built-in BINARY collating
function is used by default. </p>

<p>The DEFAULT constraint specifies a default value to use when doing an
INSERT. The value may be NULL, a string constant, a number, or one of the
special case-independant keywords CURRENT_TIME, CURRENT_DATE or
CURRENT_TIMESTAMP. If the value is NULL, a string constant or number, it is
literally inserted into the column whenever an INSERT statement that does not
specify a value for the column is executed. If the value is CURRENT_TIME,
CURRENT_DATE or CURRENT_TIMESTAMP, then the current UTC date and/or time is
inserted into the columns. For CURRENT_TIME, the format is HH:MM:SS. For
CURRENT_DATE, YYYY-MM-DD. The format for CURRENT_TIMESTAMP is &quot;YYYY-MM-DD
HH:MM:SS&quot;. </p>

<p>Specifying a PRIMARY KEY normally just creates a UNIQUE index on the primary
key. However, if primary key is on a single column that has datatype INTEGER,
then that column is used internally as the actual key of the B-Tree for the
table. This means that the column may only hold unique integer values. (Except
for this one case, SQLite ignores the datatype specification of columns and allows
any kind of data to be put in a column regardless of its declared datatype.) If
a table does not have an INTEGER PRIMARY KEY column, then the B-Tree key will
be a automatically generated integer. The B-Tree key for a row can always be
accessed using one of the special names &quot;<b>ROWID</b>&quot;, &quot;<b>OID</b>&quot;,
or &quot;<b>_ROWID_</b>&quot;. This is true regardless of whether or not there
is an INTEGER PRIMARY KEY.</p>

<p>If the &quot;TEMP&quot; or &quot;TEMPORARY&quot; keyword occurs in between
&quot;CREATE&quot; and &quot;TABLE&quot; then the table that is created is only
visible to the process that opened the database and is automatically deleted
when the database is closed. Any indices created on a temporary table are also
temporary. Temporary tables and indices are stored in a separate file distinct
from the main database file.</p>

<p>If a is specified, then the table is created in the named database. It is an
error to specify both a and the TEMP keyword, unless the is &quot;temp&quot;.
If no database name is specified, and the TEMP keyword is not present, the
table is created in the main database.</p>

<p>The optional conflict-clause following each constraint allows the
specification of an alternative default constraint conflict resolution
algorithm for that constraint. The default is abort ABORT. Different
constraints within the same table may have different default conflict
resolution algorithms. If an COPY, INSERT, or UPDATE command specifies a
different conflict resolution algorithm, then that algorithm is used in place
of the default algorithm specified in the CREATE TABLE statement. See the
section titled <a href="#conflict">ON CONFLICT</a> for additional information.</p>

<p>CHECK constraints are ignored in the current implementation. Support for
CHECK constraints may be added in the future. As of version 2.3.0, NOT NULL,
PRIMARY KEY, and UNIQUE constraints all work.</p>

<p>There are no arbitrary limits on the number of columns or on the number of
constraints in a table. The total amount of data in a single row is limited to
about 1 megabytes in version 2.8. </p>

<p>The CREATE TABLE AS form defines the table to be the result set of a query.
The names of the table columns are the names of the columns in the result.</p>

<p>The exact text of each CREATE TABLE statement is stored in the <b>sqlite_master</b>
table. Every time the database is opened, all CREATE TABLE statements are read
from the <b>sqlite_master</b> table and used to regenerate SQLite's internal
representation of the table layout. If the original command was a CREATE TABLE
AS then then an equivalent CREATE TABLE statement is synthesized and store in <b>sqlite_master</b>
in place of the original command. The text of CREATE TEMPORARY TABLE statements
are stored in the <b>sqlite_temp_master</b> table. </p>

<p>Tables are removed using the <a href="#droptable">DROP TABLE</a> statement. </p>

<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<h1><a name=createtrigger></a>CREATE TRIGGER</h1>

<table class=MsoNormalTable border=0 cellpadding=0>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>sql-statement</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='color:#2C2CF0'>CREATE </span></b>[<b><span
  style='color:#2C2CF0'>TEMP </span></b><span style='font-size:13.5pt'>|</span><b><span
  style='color:#2C2CF0'> TEMPORARY</span></b>]<b><span style='color:#2C2CF0'>
  TRIGGER </span></b><i><span style='color:#FF3434'>trigger-name</span></i><b><span
  style='color:#2C2CF0'> </span></b>[<b><span style='color:#2C2CF0'> BEFORE </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'> AFTER </span></b>]<b><span
  style='color:#2C2CF0'><br>
  </span></b><i><span style='color:#FF3434'>database-event</span></i><b><span
  style='color:#2C2CF0'> ON </span></b>[<i><span style='color:#FF3434'>database-name</span></i><b><span
  style='color:#2C2CF0'> </span></b><b><span style='font-size:13.5pt;
  color:#2C2CF0'>.</span></b>]<b><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>table-name</span></i><b><span style='color:#2C2CF0'><br>
  </span></b><i><span style='color:#FF3434'>trigger-action</span></i></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span style='display:none'>&nbsp;</span></p>

<table class=MsoNormalTable border=0 cellpadding=0>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>sql-statement</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='color:#2C2CF0'>CREATE </span></b>[<b><span
  style='color:#2C2CF0'>TEMP </span></b><span style='font-size:13.5pt'>|</span><b><span
  style='color:#2C2CF0'> TEMPORARY</span></b>]<b><span style='color:#2C2CF0'>
  TRIGGER </span></b><i><span style='color:#FF3434'>trigger-name</span></i><b><span
  style='color:#2C2CF0'> INSTEAD OF<br>
  </span></b><i><span style='color:#FF3434'>database-event</span></i><b><span
  style='color:#2C2CF0'> ON </span></b>[<i><span style='color:#FF3434'>database-name</span></i><b><span
  style='color:#2C2CF0'> </span></b><b><span style='font-size:13.5pt;
  color:#2C2CF0'>.</span></b>]<b><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>view-name</span></i><b><span style='color:#2C2CF0'><br>
  </span></b><i><span style='color:#FF3434'>trigger-action</span></i></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span style='display:none'>&nbsp;</span></p>

<table class=MsoNormalTable border=0 cellpadding=0>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>database-event</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='color:#2C2CF0'>DELETE </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'> <br>
  INSERT </span></b><span style='font-size:13.5pt'>|</span><b><span
  style='color:#2C2CF0'> <br>
  UPDATE </span></b><span style='font-size:13.5pt'>|</span><b><span
  style='color:#2C2CF0'> <br>
  UPDATE OF </span></b><i><span style='color:#FF3434'>column-list</span></i></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span style='display:none'>&nbsp;</span></p>

<table class=MsoNormalTable border=0 cellpadding=0>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>trigger-action</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal>[<b><span style='color:#2C2CF0'> FOR EACH ROW </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'> FOR EACH </span></b><b><span
   style='color:#2C2CF0'>STAT</span></b><b><span style='color:#2C2CF0'>EMENT </span></b>]<b><span
  style='color:#2C2CF0'> </span></b>[<b><span style='color:#2C2CF0'> WHEN </span></b><i><span
  style='color:#FF3434'>expression</span></i><b><span style='color:#2C2CF0'> </span></b>]<b><span
  style='color:#2C2CF0'> <br>
  BEGIN <br>
  &nbsp;&nbsp;&nbsp;&nbsp;</span></b><i><span style='color:#FF3434'>trigger-step</span></i><b><span
  style='color:#2C2CF0'> ; </span></b>[<b><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>trigger-step</span></i><b><span style='color:#2C2CF0'>
  ; </span></b>]<span style='font-size:13.5pt'>*</span><b><span
  style='color:#2C2CF0'><br>
  END</span></b></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span style='display:none'>&nbsp;</span></p>

<table class=MsoNormalTable border=0 cellpadding=0>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>trigger-step</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><i><span style='color:#FF3434'>update-statement</span></i><b><span
  style='color:#2C2CF0'> </span></b><span style='font-size:13.5pt'>|</span><b><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>insert-statement</span></i><b><span
  style='color:#2C2CF0'> </span></b><span style='font-size:13.5pt'>|</span><b><span
  style='color:#2C2CF0'> <br>
  </span></b><i><span style='color:#FF3434'>delete-statement</span></i><b><span
  style='color:#2C2CF0'> </span></b><span style='font-size:13.5pt'>|</span><b><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>select-statement</span></i></p>
  </td>
 </tr>
</table>

<p>The CREATE TRIGGER statement is used to add triggers to the database schema.
Triggers are database operations (the <i>trigger-action</i>) that are
automatically performed when a specified database event (the <i>database-event</i>)
occurs. </p>

<p>A trigger may be specified to fire whenever a DELETE, INSERT or UPDATE of a
particular database table occurs, or whenever an UPDATE of one or more
specified columns of a table are updated.</p>

<p>At this time SQLite supports only FOR EACH ROW triggers, not FOR EACH
STATEMENT triggers. Hence explicitly specifying FOR EACH ROW is optional. FOR
EACH ROW implies that the SQL statements specified as <i>trigger-steps</i> may
be executed (depending on the WHEN clause) for each database row being
inserted, updated or deleted by the statement causing the trigger to fire.</p>

<p>Both the WHEN clause and the <i>trigger-steps</i> may access elements of the
row being inserted, deleted or updated using references of the form &quot;NEW.<i>column-name</i>&quot;
and &quot;OLD.<i>column-name</i>&quot;, where <i>column-name</i> is the name of
a column from the table that the trigger is associated with. OLD and NEW
references may only be used in triggers on <i>trigger-event</i>s for which they
are relevant, as follows:</p>

<table class=MsoNormalTable border=0 cellpadding=0>
 <tr>
  <td width=120 valign=top style='width:1.25in;padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i>INSERT</i></p>
  </td>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal>NEW references are valid</p>
  </td>
 </tr>
 <tr>
  <td width=120 valign=top style='width:1.25in;padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i>UPDATE</i></p>
  </td>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal>NEW and OLD references are valid</p>
  </td>
 </tr>
 <tr>
  <td width=120 valign=top style='width:1.25in;padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i>DELETE</i></p>
  </td>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal>OLD references are valid</p>
  </td>
 </tr>
</table>

<p>If a WHEN clause is supplied, the SQL statements specified as <i>trigger-steps</i>
are only executed for rows for which the WHEN clause is true. If no WHEN clause
is supplied, the SQL statements are executed for all rows.</p>

<p>The specified <i>trigger-time</i> determines when the <i>trigger-steps</i> will
be executed relative to the insertion, modification or removal of the
associated row.</p>

<p>An ON CONFLICT clause may be specified as part of an UPDATE or INSERT <i>trigger-step</i>.
However if an ON CONFLICT clause is specified as part of the statement causing
the trigger to fire, then this conflict handling policy is used instead.</p>

<p>Triggers are automatically dropped when the table that they are associated
with is dropped.</p>

<p>Triggers may be created on views, as well as ordinary tables, by specifying
INSTEAD OF in the CREATE TRIGGER statement. If one or more ON INSERT, ON DELETE
or ON UPDATE triggers are defined on a view, then it is not an error to execute
an INSERT, DELETE or UPDATE statement on the view, respectively. Thereafter,
executing an INSERT, DELETE or UPDATE on the view causes the associated
triggers to fire. The real tables underlying the view are not modified (except
possibly explicitly, by a trigger program).</p>

<p><b>Example:</b></p>

<p>Assuming that customer records are stored in the &quot;customers&quot;
table, and that order records are stored in the &quot;orders&quot; table, the
following trigger ensures that all associated orders are redirected when a
customer changes his or her address:</p>

<pre>CREATE TRIGGER update_customer_address UPDATE OF address ON customers </pre><pre>  BEGIN</pre><pre>    UPDATE orders SET address = new.address WHERE customer_name = old.name;</pre><pre>  END;</pre>

<p>With this trigger installed, executing the statement:</p>

<pre>UPDATE customers SET address = '1 Main St.' WHERE name = 'Jack Jones';</pre>

<p>causes the following to be automatically executed:</p>

<pre>UPDATE orders SET address = '1 Main St.' WHERE customer_name = 'Jack Jones';</pre>

<p>Note that currently, triggers may behave oddly when created on tables with
INTEGER PRIMARY KEY fields. If a BEFORE trigger program modifies the INTEGER
PRIMARY KEY field of a row that will be subsequently updated by the statement
that causes the trigger to fire, then the update may not occur. The workaround
is to declare the table with a PRIMARY KEY column instead of an INTEGER PRIMARY
KEY column.</p>

<p>A special SQL function RAISE() may be used within a trigger-program, with
the following syntax</p>

<table class=MsoNormalTable border=0 cellpadding=0>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>raise-function</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='color:#2C2CF0'>RAISE </span></b><b><span
  style='font-size:13.5pt;color:#2C2CF0'>(</span><span style='color:#2C2CF0'>
  ABORT</span></b><b><span style='font-size:13.5pt;color:#2C2CF0'>,</span><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>error-message</span></i><b><span
  style='color:#2C2CF0'> </span></b><b><span style='font-size:13.5pt;
  color:#2C2CF0'>)</span><span style='color:#2C2CF0'> </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'> <br>
  RAISE </span></b><b><span style='font-size:13.5pt;color:#2C2CF0'>(</span><span
  style='color:#2C2CF0'> FAIL</span></b><b><span style='font-size:13.5pt;
  color:#2C2CF0'>,</span><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>error-message</span></i><b><span style='color:#2C2CF0'>
  </span></b><b><span style='font-size:13.5pt;color:#2C2CF0'>)</span><span
  style='color:#2C2CF0'> </span></b><span style='font-size:13.5pt'>|</span><b><span
  style='color:#2C2CF0'> <br>
  RAISE </span></b><b><span style='font-size:13.5pt;color:#2C2CF0'>(</span><span
  style='color:#2C2CF0'> ROLLBACK</span></b><b><span style='font-size:13.5pt;
  color:#2C2CF0'>,</span><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>error-message</span></i><b><span style='color:#2C2CF0'>
  </span></b><b><span style='font-size:13.5pt;color:#2C2CF0'>)</span><span
  style='color:#2C2CF0'> </span></b><span style='font-size:13.5pt'>|</span><b><span
  style='color:#2C2CF0'> <br>
  RAISE </span></b><b><span style='font-size:13.5pt;color:#2C2CF0'>(</span><span
  style='color:#2C2CF0'> IGNORE </span></b><b><span style='font-size:13.5pt;
  color:#2C2CF0'>)</span></b></p>
  </td>
 </tr>
</table>

<p>When one of the first three forms is called during trigger-program
execution, the specified ON CONFLICT processing is performed (either ABORT,
FAIL or ROLLBACK) and the current query terminates. An error code of
SQLITE_CONSTRAINT is returned to the user, along with the specified error
message.</p>

<p>When RAISE(IGNORE) is called, the remainder of the current trigger program,
the statement that caused the trigger program to execute and any subsequent
trigger programs that would of been executed are abandoned. No database changes
are rolled back. If the statement that caused the trigger program to execute is
itself part of a trigger program, then that trigger program resumes execution
at the beginning of the next step. </p>

<p>Triggers are removed using the <a href="#droptrigger">DROP TRIGGER</a>
statement. Non-temporary triggers cannot be added on a table in an attached
database.</p>

<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<h1><a name=createview></a>CREATE VIEW</h1>

<table class=MsoNormalTable border=0 cellpadding=0>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>sql-command</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='color:#2C2CF0'>CREATE </span></b>[<b><span
  style='color:#2C2CF0'>TEMP </span></b><span style='font-size:13.5pt'>|</span><b><span
  style='color:#2C2CF0'> TEMPORARY</span></b>]<b><span style='color:#2C2CF0'>
  VIEW </span></b>[<i><span style='color:#FF3434'>database-name</span></i><b><span
  style='font-size:13.5pt;color:#2C2CF0'>.</span></b>]<b><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>view-name</span></i><b><span
  style='color:#2C2CF0'> AS </span></b><i><span style='color:#FF3434'>select-statement</span></i></p>
  </td>
 </tr>
</table>

<p>The CREATE VIEW command assigns a name to a pre-packaged <a href="#select">SELECT</a>
statement. Once the view is created, it can be used in the FROM clause of
another SELECT in place of a table name. </p>

<p>If the &quot;TEMP&quot; or &quot;TEMPORARY&quot; keyword occurs in between
&quot;CREATE&quot; and &quot;TABLE&quot; then the table that is created is only
visible to the process that opened the database and is automatically deleted
when the database is closed.</p>

<p>If a is specified, then the view is created in the named database. It is an
error to specify both a and the TEMP keyword, unless the is &quot;temp&quot;.
If no database name is specified, and the TEMP keyword is not present, the
table is created in the main database.</p>

<p>You cannot COPY, DELETE, INSERT or UPDATE a view. Views are read-only in
SQLite. However, in many cases you can use a <a href="#trigger">TRIGGER</a> on
the view to accomplish the same thing. Views are removed with the <a
href="#dropview">DROP VIEW</a> command. Non-temporary views cannot be created
on tables in an attached database.</p>

<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<h1><a name=delete></a>DELETE</h1>

<table class=MsoNormalTable border=0 cellpadding=0>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>sql-statement</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='color:#2C2CF0'>DELETE FROM </span></b>[<i><span
  style='color:#FF3434'>database-name</span></i><b><span style='color:#2C2CF0'>
  </span></b><b><span style='font-size:13.5pt;color:#2C2CF0'>.</span></b>]<b><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>table-name</span></i><b><span
  style='color:#2C2CF0'> </span></b>[<b><span style='color:#2C2CF0'>WHERE </span></b><i><span
  style='color:#FF3434'>expr</span></i>]</p>
  </td>
 </tr>
</table>

<p>The DELETE command is used to remove records from a table. The command
consists of the &quot;DELETE FROM&quot; keywords followed by the name of the
table from which records are to be removed. </p>

<p>Without a WHERE clause, all rows of the table are removed. If a WHERE clause
is supplied, then only those rows that match the expression are removed.</p>

<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<h1><a name=detach></a>DETACH DATABASE</h1>

<table class=MsoNormalTable border=0 cellpadding=0>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>sql-command</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='color:#2C2CF0'>DETACH </span></b>[<b><span
  style='color:#2C2CF0'>DATABASE</span></b>]<b><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>database-name</span></i></p>
  </td>
 </tr>
</table>

<p>This statement detaches an additional database connection previously
attached using the <a href="#attach">ATTACH DATABASE</a> statement. It is
possible to have the same database file attached multiple times using different
names, and detaching one connection to a file will leave the others intact.</p>

<p>This statement will fail if SQLite is in the middle of a transaction.</p>

<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<h1><a name=dropindex></a>DROP INDEX</h1>

<table class=MsoNormalTable border=0 cellpadding=0>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>sql-command</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='color:#2C2CF0'>DROP INDEX </span></b>[<i><span
  style='color:#FF3434'>database-name</span></i><b><span style='color:#2C2CF0'>
  </span></b><b><span style='font-size:13.5pt;color:#2C2CF0'>.</span></b>]<b><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>index-name</span></i></p>
  </td>
 </tr>
</table>

<p>The DROP INDEX statement removes an index added with the <a
href="#createindex">CREATE INDEX</a> statement. The index named is completely
removed from the disk. The only way to recover the index is to reenter the
appropriate CREATE INDEX command. Non-temporary indexes on tables in an
attached database cannot be dropped.</p>

<p>The DROP INDEX statement does not reduce the size of the database file.
Empty space in the database is retained for later INSERTs. To remove free space
in the database, use the <a href="#vacuum">VACUUM</a> command.</p>

<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<h1><a name=droptable></a>DROP TABLE</h1>

<table class=MsoNormalTable border=0 cellpadding=0>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>sql-command</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='color:#2C2CF0'>DROP TABLE </span></b>[<i><span
  style='color:#FF3434'>database-name</span></i><b><span style='font-size:13.5pt;
  color:#2C2CF0'>.</span></b>]<b><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>table-name</span></i></p>
  </td>
 </tr>
</table>

<p>The DROP TABLE statement removes a table added with the <a
href="#createtable">CREATE TABLE</a> statement. The name specified is the table
name. It is completely removed from the database schema and the disk file. The
table can not be recovered. All indices associated with the table are also
deleted. Non-temporary tables in an attached database cannot be dropped.</p>

<p>The DROP TABLE statement does not reduce the size of the database file.
Empty space in the database is retained for later INSERTs. To remove free space
in the database, use the <a href="#vacuum">VACUUM</a> command.</p>

<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<h1><a name=droptrigger></a>DROP TRIGGER</h1>

<table class=MsoNormalTable border=0 cellpadding=0>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>sql-statement</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='color:#2C2CF0'>DROP TRIGGER </span></b>[<i><span
  style='color:#FF3434'>database-name</span></i><b><span style='color:#2C2CF0'>
  </span></b><b><span style='font-size:13.5pt;color:#2C2CF0'>.</span></b>]<b><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>trigger-name</span></i></p>
  </td>
 </tr>
</table>

<p>The DROP TRIGGER statement removes a trigger created by the <a
href="#createtrigger">CREATE TRIGGER</a> statement. The trigger is deleted from
the database schema. Note that triggers are automatically dropped when the
associated table is dropped. Non-temporary triggers cannot be dropped on
attached tables.</p>

<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<h1><a name=dropview></a>DROP VIEW</h1>

<table class=MsoNormalTable border=0 cellpadding=0>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>sql-command</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='color:#2C2CF0'>DROP VIEW </span></b><i><span
  style='color:#FF3434'>view-name</span></i></p>
  </td>
 </tr>
</table>

<p>The DROP VIEW statement removes a view created by the <a href="#createview">CREATE
VIEW</a> statement. The name specified is the view name. It is removed from the
database schema, but no actual data in the underlying base tables is modified.
Non-temporary views in attached databases cannot be dropped.</p>

<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<h1><a name=expr></a>expression</h1>

<table class=MsoNormalTable border=0 cellpadding=0>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>expr</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><i><span style='color:#FF3434'>expr</span></i><b><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>binary-op</span></i><b><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>expr</span></i><b><span
  style='color:#2C2CF0'> </span></b><span style='font-size:13.5pt'>|</span><b><span
  style='color:#2C2CF0'><br>
  </span></b><i><span style='color:#FF3434'>expr</span></i><b><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>like-op</span></i><b><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>expr</span></i><b><span
  style='color:#2C2CF0'> </span></b><span style='font-size:13.5pt'>|</span><b><span
  style='color:#2C2CF0'><br>
  </span></b><i><span style='color:#FF3434'>unary-op</span></i><b><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>expr</span></i><b><span
  style='color:#2C2CF0'> </span></b><span style='font-size:13.5pt'>|</span><b><span
  style='color:#2C2CF0'><br>
  </span></b><b><span style='font-size:13.5pt;color:#2C2CF0'>(</span><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>expr</span></i><b><span
  style='color:#2C2CF0'> </span></b><b><span style='font-size:13.5pt;
  color:#2C2CF0'>)</span><span style='color:#2C2CF0'> </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'><br>
  </span></b><i><span style='color:#FF3434'>column-name</span></i><b><span
  style='color:#2C2CF0'> </span></b><span style='font-size:13.5pt'>|</span><b><span
  style='color:#2C2CF0'><br>
  </span></b><i><span style='color:#FF3434'>table-name</span></i><b><span
  style='color:#2C2CF0'> </span></b><b><span style='font-size:13.5pt;
  color:#2C2CF0'>.</span><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>column-name</span></i><b><span style='color:#2C2CF0'> </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'><br>
  </span></b><i><span style='color:#FF3434'>database-name</span></i><b><span
  style='color:#2C2CF0'> </span></b><b><span style='font-size:13.5pt;
  color:#2C2CF0'>.</span><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>table-name</span></i><b><span style='color:#2C2CF0'> </span></b><b><span
  style='font-size:13.5pt;color:#2C2CF0'>.</span><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>column-name</span></i><b><span style='color:#2C2CF0'> </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'><br>
  </span></b><i><span style='color:#FF3434'>literal-value</span></i><b><span
  style='color:#2C2CF0'> </span></b><span style='font-size:13.5pt'>|</span><b><span
  style='color:#2C2CF0'><br>
  </span></b><i><span style='color:#FF3434'>function-name</span></i><b><span
  style='color:#2C2CF0'> </span></b><b><span style='font-size:13.5pt;
  color:#2C2CF0'>(</span><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>expr-list</span></i><b><span style='color:#2C2CF0'> </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'> </span></b><b><span
  style='font-size:13.5pt;color:#2C2CF0'>*</span><span style='color:#2C2CF0'> </span></b><b><span
  style='font-size:13.5pt;color:#2C2CF0'>)</span><span style='color:#2C2CF0'> </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'><br>
  </span></b><i><span style='color:#FF3434'>expr</span></i><b><span
  style='color:#2C2CF0'> ISNULL </span></b><span style='font-size:13.5pt'>|</span><b><span
  style='color:#2C2CF0'><br>
  </span></b><i><span style='color:#FF3434'>expr</span></i><b><span
  style='color:#2C2CF0'> NOTNULL </span></b><span style='font-size:13.5pt'>|</span><b><span
  style='color:#2C2CF0'><br>
  </span></b><i><span style='color:#FF3434'>expr</span></i><b><span
  style='color:#2C2CF0'> </span></b>[<b><span style='color:#2C2CF0'>NOT</span></b>]<b><span
  style='color:#2C2CF0'> BETWEEN </span></b><i><span style='color:#FF3434'>expr</span></i><b><span
  style='color:#2C2CF0'> AND </span></b><i><span style='color:#FF3434'>expr</span></i><b><span
  style='color:#2C2CF0'> </span></b><span style='font-size:13.5pt'>|</span><b><span
  style='color:#2C2CF0'><br>
  </span></b><i><span style='color:#FF3434'>expr</span></i><b><span
  style='color:#2C2CF0'> </span></b>[<b><span style='color:#2C2CF0'>NOT</span></b>]<b><span
  style='color:#2C2CF0'> IN </span></b><b><span style='font-size:13.5pt;
  color:#2C2CF0'>(</span><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>value-list</span></i><b><span style='color:#2C2CF0'> </span></b><b><span
  style='font-size:13.5pt;color:#2C2CF0'>)</span><span style='color:#2C2CF0'> </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'><br>
  </span></b><i><span style='color:#FF3434'>expr</span></i><b><span
  style='color:#2C2CF0'> </span></b>[<b><span style='color:#2C2CF0'>NOT</span></b>]<b><span
  style='color:#2C2CF0'> IN </span></b><b><span style='font-size:13.5pt;
  color:#2C2CF0'>(</span><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>select-statement</span></i><b><span style='color:#2C2CF0'>
  </span></b><b><span style='font-size:13.5pt;color:#2C2CF0'>)</span><span
  style='color:#2C2CF0'> </span></b><span style='font-size:13.5pt'>|</span><b><span
  style='color:#2C2CF0'><br>
  </span></b><i><span style='color:#FF3434'>expr</span></i><b><span
  style='color:#2C2CF0'> </span></b>[<b><span style='color:#2C2CF0'>NOT</span></b>]<b><span
  style='color:#2C2CF0'> IN </span></b>[<i><span style='color:#FF3434'>database-name</span></i><b><span
  style='color:#2C2CF0'> </span></b><b><span style='font-size:13.5pt;
  color:#2C2CF0'>.</span></b>]<b><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>table-name</span></i><b><span style='color:#2C2CF0'> </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'><br>
  </span></b><b><span style='font-size:13.5pt;color:#2C2CF0'>(</span><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>select-statement</span></i><b><span
  style='color:#2C2CF0'> </span></b><b><span style='font-size:13.5pt;
  color:#2C2CF0'>)</span><span style='color:#2C2CF0'> </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'><br>
  CASE </span></b>[<i><span style='color:#FF3434'>expr</span></i>]<b><span
  style='color:#2C2CF0'> </span></b>(<b><span style='color:#2C2CF0'> WHEN </span></b><i><span
  style='color:#FF3434'>expr</span></i><b><span style='color:#2C2CF0'> THEN </span></b><i><span
  style='color:#FF3434'>expr</span></i><b><span style='color:#2C2CF0'> </span></b>)+<b><span
  style='color:#2C2CF0'> </span></b>[<b><span style='color:#2C2CF0'>ELSE </span></b><i><span
  style='color:#FF3434'>expr</span></i>]<b><span style='color:#2C2CF0'> END</span></b></p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>like-op</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='color:#2C2CF0'>LIKE </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'> </span></b><b><span
   style='color:#2C2CF0'>GLOB</span></b><b><span style='color:#2C2CF0'> </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'> NOT LIKE </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'> NOT </span></b><b><span
   style='color:#2C2CF0'>GLOB</span></b></p>
  </td>
 </tr>
</table>

<p>This section is different from the others. Most other sections of this
document talks about a particular SQL command. This section does not talk about
a standalone command but about &quot;expressions&quot; which are subcomponents
of most other commands.</p>

<p>SQLite understands the following binary operators, in order from highest to
lowest precedence:</p>

<pre><span style='font-size:12.0pt;color:#2C2CF0'>||</span></pre><pre><span
style='font-size:12.0pt;color:#2C2CF0'>*    /    %</span></pre><pre><span
style='font-size:12.0pt;color:#2C2CF0'>+    -</span></pre><pre><span
style='font-size:12.0pt;color:#2C2CF0'>&lt;&lt;   &gt;&gt;   &amp;    |</span></pre><pre><span
style='font-size:12.0pt;color:#2C2CF0'>&lt;    &lt;=   &gt;    &gt;=</span></pre><pre><span
style='font-size:12.0pt;color:#2C2CF0'>=    ==   !=   &lt;&gt;   </span><span
style='color:#2C2CF0'>IN</span></pre><pre><span style='color:#2C2CF0'>AND   </span></pre><pre><span
style='color:#2C2CF0'>OR</span></pre>

<p>Supported unary operators are these:</p>

<pre><span style='font-size:12.0pt;color:#2C2CF0'>-    +    !    ~</span></pre>

<p>Any SQLite value can be used as part of an expression. For arithmetic
operations, integers are treated as integers. Strings are first converted to
real numbers using <b>atof()</b>. For comparison operators, numbers compare as
numbers and strings compare using the <b>strcmp()</b> function. Note that there
are two variations of the equals and not equals operators. Equals can be either
<span style='font-size:13.5pt;color:#2C2CF0'>=</span> or <span
style='font-size:13.5pt;color:#2C2CF0'>==</span>. The non-equals operator can
be either <span style='font-size:13.5pt;color:#2C2CF0'>!=</span> or <span
style='font-size:13.5pt;color:#2C2CF0'>&lt;&gt;</span>. The <span
style='font-size:13.5pt;color:#2C2CF0'>||</span> operator is
&quot;concatenate&quot; - it joins together the two strings of its operands.
The operator <span style='font-size:13.5pt;color:#2C2CF0'>%</span> outputs the
remainder of its left operand modulo its right operand.</p>

<p><a name=like></a>The LIKE operator does a wildcard comparison. The operand to
the right contains the wildcards. A percent symbol <span style='font-size:13.5pt;
color:#2C2CF0'>%</span> in the right operand matches any sequence of zero or
more characters on the left. An underscore <span style='font-size:13.5pt;
color:#2C2CF0'>_</span> on the right matches any single character on the left.
The LIKE operator is not case sensitive and will match upper case characters on
one side against lower case characters on the other. (A bug: SQLite only
understands upper/lower case for 7-bit Latin characters. Hence the LIKE
operator is case sensitive for 8-bit iso8859 characters or UTF-8 characters. For
example, the expression <b>'a'&nbsp;LIKE&nbsp;'A'</b> is TRUE but <b>'æ'&nbsp;LIKE&nbsp;'Æ'</b>
is FALSE.). The infix LIKE operator is identical the user function <a
href="#likeFunc">like(<i>X</i>,<i>Y</i>)</a>. </p>

<p><a name=glob></a>The GLOB operator is similar to LIKE but uses the Unix file
globbing syntax for its wildcards. Also, GLOB is case sensitive, unlike LIKE.
Both GLOB and LIKE may be preceded by the NOT keyword to invert the sense of
the test. The infix GLOB operator is identical the user function <a
href="#globFunc">glob(<i>X</i>,<i>Y</i>)</a>.</p>

<p>A column name can be any of the names defined in the CREATE TABLE statement
or one of the following special identifiers: &quot;<b>ROWID</b>&quot;, &quot;<b>OID</b>&quot;,
or &quot;<b>_ROWID_</b>&quot;. These special identifiers all describe the
unique random integer key (the &quot;row key&quot;) associated with every row
of every table. The special identifiers only refer to the row key if the CREATE
TABLE statement does not define a real column with the same name. Row keys act
like read-only columns. A row key can be used anywhere a regular column can be
used, except that you cannot change the value of a row key in an UPDATE or
INSERT statement. &quot;SELECT * ...&quot; does not return the row key.</p>

<p>SELECT statements can appear in expressions as either the right-hand operand
of the IN operator or as a scalar quantity. In both cases, the SELECT should
have only a single column in its result. Compound SELECTs (connected with
keywords like UNION or EXCEPT) are allowed. A SELECT in an expression is
evaluated once before any other processing is performed, so none of the
expressions within the select itself can refer to quantities in the containing
expression.</p>

<p>When a SELECT is the right operand of the IN operator, the IN operator
returns TRUE if the result of the left operand is any of the values generated
by the select. The IN operator may be preceded by the NOT keyword to invert the
sense of the test.</p>

<p>When a SELECT appears within an expression but is not the right operand of
an IN operator, then the first row of the result of the SELECT becomes the
value used in the expression. If the SELECT yields more than one result row,
all rows after the first are ignored. If the SELECT yields no rows, then the
value of the SELECT is NULL.</p>

<p>Both simple and aggregate functions are supported. A simple function can be
used in any expression. Simple functions return a result immediately based on
their inputs. Aggregate functions may only be used in a SELECT statement.
Aggregate functions compute their result across all rows of the result set.</p>

<table class=MsoNormalTable border=0 cellpadding=0>
 <tr>
  <td width=142 valign=top style='width:106.35pt;padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><a name=likeFunc></a><a
  name=globFunc></a>abs(<i>X</i>)</p>
  </td>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal>Return the absolute value of argument <i>X</i>.</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'>coalesce(<i>X</i>,<i>Y</i>,...)</p>
  </td>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal>Return a copy of the first non-NULL argument. If all
  arguments are NULL then NULL is returned. There must be at least 2 arguments.</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'>glob(<i>X</i>,<i>Y</i>)</p>
  </td>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal>This function is used to implement the &quot;<b>X GLOB Y</b>&quot;
  syntax of SQLite. </p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'>ifnull(<i>X</i>,<i>Y</i>)</p>
  </td>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal>Return a copy of the first non-NULL argument. If both
  arguments are NULL then NULL is returned. This behaves the same as <b>coalesce()</b>
  above.</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'>last_insert_rowid()</p>
  </td>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal>Return the ROWID of the last row insert from this
  connection to the database. This is the same value that would be returned
  from the <b>sqlite_last_insert_rowid()</b> API function.</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'>length(<i>X</i>)</p>
  </td>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal>Return the string length of <i>X</i> in characters. If
  SQLite is configured to support UTF-8, then the number of UTF-8 characters is
  returned, not the number of bytes.</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'>like(<i>X</i>,<i>Y</i>)</p>
  </td>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal>This function is used to implement the &quot;<b>X LIKE Y</b>&quot;
  syntax of SQL. </p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'>lower(<i>X</i>)</p>
  </td>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal>Return a copy of string <i>X</i> will all characters
  converted to lower case. The C library <b>tolower()</b> routine is used for the
  conversion, which means that this function might not work correctly on UTF-8
  characters.</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'>max(<i>X</i>,<i>Y</i>,...)</p>
  </td>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal>Return the argument with the maximum value. Arguments may
  be strings in addition to numbers. The maximum value is determined by the
  usual sort order. Note that <b>max()</b> is a simple function when it has 2
  or more arguments but converts to an aggregate function if given only a
  single argument.</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'>min(<i>X</i>,<i>Y</i>,...)</p>
  </td>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal>Return the argument with the minimum value. Arguments may
  be strings in addition to numbers. The minimum value is determined by the
  usual sort order. Note that <b>min()</b> is a simple function when it has 2
  or more arguments but converts to an aggregate function if given only a
  single argument.</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'>nullif(<i>X</i>,<i>Y</i>)</p>
  </td>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal>Return the first argument if the arguments are different,
  otherwise return NULL.</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'>quote(<i>X</i>)</p>
  </td>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal>This routine returns a string which is the value of its
  argument suitable for inclusion into another SQL statement. Strings are
  surrounded by single-quotes with escapes on interior quotes as needed. BLOBs
  are encoded as hexadecimal literals. The current implementation of VACUUM
  uses this function. The function is also useful when writing triggers to
  implement undo/redo functionality. </p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'>random(*)</p>
  </td>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal>Return a random integer between -2147483648 and +2147483647.</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'>round(<i>X</i>)<br>
  round(<i>X</i>,<i>Y</i>)</p>
  </td>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal>Round off the number <i>X</i> to <i>Y</i> digits to the
  right of the decimal point. If the <i>Y</i> argument is omitted, 0 is
  assumed.</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'>soundex(<i>X</i>)</p>
  </td>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal>Compute the soundex encoding of the string <i>X</i>. The
  string &quot;?000&quot; is returned if the argument is NULL. This function is
  omitted from SQLite by default. It is only available the -DSQLITE_SOUNDEX=1
  compiler option is used when SQLite is built. <span style='color:blue'>THIS
  FUNCTION IS CURRENTLY NOT AVAILABLE IN THE SQL </span><span style='color:
   blue'>DATA</span><span style='color:blue'>BASE OBJECT v1.1.</span></p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'>sqlite_version(*)</p>
  </td>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal>Return the version string for the SQLite library that is
  running. Example: &quot;2.8.15&quot;</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'>substr(<i>X</i>,<i>Y</i>,<i>Z</i>)</p>
  </td>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal>Return a substring of input string <i>X</i> that begins
  with the <i>Y</i>-th character and which is <i>Z</i> characters long. The
  left-most character of <i>X</i> is number 1. If <i>Y</i> is negative the the
  first character of the substring is found by counting from the right rather
  than the left. </p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'>typeof(<i>X</i>)</p>
  </td>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal>Return the type of the expression <i>X</i>. The only
  return values are &quot;null&quot;, &quot;integer&quot;, &quot;real&quot;,
  and &quot;text&quot;. </p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'>upper(<i>X</i>)</p>
  </td>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal>Return a copy of input string <i>X</i> converted to all
  upper-case letters. The implementation of this function uses the C library
  routine <b>toupper()</b> which means it may not work correctly on UTF-8
  strings.</p>
  </td>
 </tr>
</table>

<p>The following aggregate functions are available by default. </p>

<table class=MsoNormalTable border=0 cellpadding=0>
 <tr>
  <td width=120 valign=top style='width:1.25in;padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'>avg(<i>X</i>)</p>
  </td>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal>Return the average value of all <i>X</i> within a group.</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'>count(<i>X</i>)<br>
  count(*)</p>
  </td>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal>The first form return a count of the number of times that <i>X</i>
  is not NULL in a group. The second form (with no argument) returns the total
  number of rows in the group.</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'>max(<i>X</i>)</p>
  </td>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal>Return the maximum value of all values in the group. The
  usual sort order is used to determine the maximum.</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'>min(<i>X</i>)</p>
  </td>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal>Return the minimum non-NULL value of all values in the
  group. The usual sort order is used to determine the minimum. NULL is only
  returned if all values in the group are NULL.</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'>sum(<i>X</i>)</p>
  </td>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal>Return the numeric sum of all values in the group.</p>
  </td>
 </tr>
</table>

<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<h1><a name=insert></a>INSERT</h1>

<table class=MsoNormalTable border=0 cellpadding=0>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>sql-statement</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='color:#2C2CF0'>INSERT </span></b>[<b><span
  style='color:#2C2CF0'>OR </span></b><i><span style='color:#FF3434'>conflict-algorithm</span></i>]<b><span
  style='color:#2C2CF0'> INTO </span></b>[<i><span style='color:#FF3434'>database-name</span></i><b><span
  style='color:#2C2CF0'> </span></b><b><span style='font-size:13.5pt;
  color:#2C2CF0'>.</span></b>]<b><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>table-name</span></i><b><span style='color:#2C2CF0'> </span></b>[<b><span
  style='font-size:13.5pt;color:#2C2CF0'>(</span></b><i><span style='color:
  #FF3434'>column-list</span></i><b><span style='font-size:13.5pt;color:#2C2CF0'>)</span></b>]<b><span
  style='color:#2C2CF0'> VALUES</span></b><b><span style='font-size:13.5pt;
  color:#2C2CF0'>(</span></b><i><span style='color:#FF3434'>value-list</span></i><b><span
  style='font-size:13.5pt;color:#2C2CF0'>)</span><span style='color:#2C2CF0'> </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'><br>
  INSERT </span></b>[<b><span style='color:#2C2CF0'>OR </span></b><i><span
  style='color:#FF3434'>conflict-algorithm</span></i>]<b><span
  style='color:#2C2CF0'> INTO </span></b>[<i><span style='color:#FF3434'>database-name</span></i><b><span
  style='color:#2C2CF0'> </span></b><b><span style='font-size:13.5pt;
  color:#2C2CF0'>.</span></b>]<b><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>table-name</span></i><b><span style='color:#2C2CF0'> </span></b>[<b><span
  style='font-size:13.5pt;color:#2C2CF0'>(</span></b><i><span style='color:
  #FF3434'>column-list</span></i><b><span style='font-size:13.5pt;color:#2C2CF0'>)</span></b>]<b><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>select-statement</span></i></p>
  </td>
 </tr>
</table>

<p>The INSERT statement comes in two basic forms. The first form (with the
&quot;VALUES&quot; keyword) creates a single new row in an existing table. If
no column-list is specified then the number of values must be the same as the
number of columns in the table. If a column-list is specified, then the number
of values must match the number of specified columns. Columns of the table that
do not appear in the column list are filled with the default value, or with
NULL if not default value is specified. </p>

<p>The second form of the INSERT statement takes it data from a SELECT
statement. The number of columns in the result of the SELECT must exactly match
the number of columns in the table if no column list is specified, or it must
match the number of columns name in the column list. A new entry is made in the
table for every row of the SELECT result. The SELECT may be simple or compound.
If the SELECT statement has an ORDER BY clause, the ORDER BY is ignored.</p>

<p>The optional conflict-clause allows the specification of an alternative
constraint conflict resolution algorithm to use during this one command. See
the section titled <a href="#conflict">ON CONFLICT</a> for additional
information. For compatibility with MySQL, the parser allows the use of the
single keyword <a href="#replace">REPLACE</a> as an alias for &quot;INSERT OR
REPLACE&quot;. </p>

<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<h1><a name=conflict></a>ON CONFLICT clause</h1>

<table class=MsoNormalTable border=0 cellpadding=0>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>conflict-clause</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='color:#2C2CF0'>ON CONFLICT </span></b><i><span
  style='color:#FF3434'>conflict-algorithm</span></i></p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>conflict-algorithm</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='color:#2C2CF0'>ROLLBACK </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'> ABORT </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'> FAIL </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'> IGNORE </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'> REPLACE</span></b></p>
  </td>
 </tr>
</table>

<p>The ON CONFLICT clause is not a separate SQL command. It is a non-standard
clause that can appear in many other SQL commands. It is given its own section
in this document because it is not part of standard SQL and therefore might not
be familiar.</p>

<p>The syntax for the ON CONFLICT clause is as shown above for the CREATE TABLE
and CREATE INDEX commands. For the COPY, INSERT, and UPDATE commands, the
keywords &quot;ON CONFLICT&quot; are replaced by &quot;OR&quot;, to make the
syntax seem more natural. But the meaning of the clause is the same either way.</p>

<p>The ON CONFLICT clause specifies an algorithm used to resolve constraint
conflicts. There are five choices: ROLLBACK, ABORT, FAIL, IGNORE, and REPLACE.
The default algorithm is ABORT. This is what they mean:</p>

<p class=MsoNormal><b>ROLLBACK</b> </p>

<p style='margin-left:.5in'>When a constraint violation occurs, an immediate
ROLLBACK occurs, thus ending the current transaction, and the command aborts
with a return code of SQLITE_CONSTRAINT. If no transaction is active (other
than the implied transaction that is created on every command) then this
algorithm works the same as ABORT.</p>

<p class=MsoNormal><b>ABORT</b> </p>

<p style='margin-left:.5in'>When a constraint violation occurs, the command
backs out any prior changes it might have made and aborts with a return code of
SQLITE_CONSTRAINT. But no ROLLBACK is executed so changes from prior commands
within the same transaction are preserved. This is the default behavior.</p>

<p class=MsoNormal><b>FAIL</b> </p>

<p style='margin-left:.5in'>When a constraint violation occurs, the command
aborts with a return code SQLITE_CONSTRAINT. But any changes to the database
that the command made prior to encountering the constraint violation are
preserved and are not backed out. For example, if an UPDATE statement
encountered a constraint violation on the 100th row that it attempts to update,
then the first 99 row changes are preserved but changes to rows 100 and beyond
never occur.</p>

<p class=MsoNormal><b>IGNORE</b> </p>

<p style='margin-left:.5in'>When a constraint violation occurs, the one row
that contains the constraint violation is not inserted or changed. But the
command continues executing normally. Other rows before and after the row that
contained the constraint violation continue to be inserted or updated normally.
No error is returned.</p>

<p class=MsoNormal><b>REPLACE</b> </p>

<p style='margin-left:.5in'>When a UNIQUE constraint violation occurs, the
pre-existing rows that are causing the constraint violation are removed prior
to inserting or updating the current row. Thus the insert or update always
occurs. The command continues executing normally. No error is returned. If a
NOT NULL constraint violation occurs, the NULL value is replaced by the default
value for that column. If the column has no default value, then the ABORT
algorithm is used.</p>

<p style='margin-left:.5in'>When this conflict resolution strategy deletes rows
in order to satisfy a constraint, it does not invoke delete triggers on those
rows. But that may change in a future release.</p>

<p>The algorithm specified in the OR clause of a COPY, INSERT, or UPDATE
overrides any algorithm specified in a CREATE TABLE or CREATE INDEX. If no
algorithm is specified anywhere, the ABORT algorithm is used.</p>

<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<h1><a name=replace></a>REPLACE</h1>

<table class=MsoNormalTable border=0 cellpadding=0>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>sql-statement</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='color:#2C2CF0'>REPLACE INTO </span></b>[<i><span
  style='color:#FF3434'>database-name</span></i><b><span style='color:#2C2CF0'>
  </span></b><b><span style='font-size:13.5pt;color:#2C2CF0'>.</span></b>]<b><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>table-name</span></i><b><span
  style='color:#2C2CF0'> </span></b>[<b><span style='font-size:13.5pt;
  color:#2C2CF0'>(</span><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>column-list</span></i><b><span style='color:#2C2CF0'> </span></b><b><span
  style='font-size:13.5pt;color:#2C2CF0'>)</span></b>]<b><span
  style='color:#2C2CF0'> VALUES </span></b><b><span style='font-size:13.5pt;
  color:#2C2CF0'>(</span><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>value-list</span></i><b><span style='color:#2C2CF0'> </span></b><b><span
  style='font-size:13.5pt;color:#2C2CF0'>)</span><span style='color:#2C2CF0'> </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'><br>
  REPLACE INTO </span></b>[<i><span style='color:#FF3434'>database-name</span></i><b><span
  style='color:#2C2CF0'> </span></b><b><span style='font-size:13.5pt;
  color:#2C2CF0'>.</span></b>]<b><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>table-name</span></i><b><span style='color:#2C2CF0'> </span></b>[<b><span
  style='font-size:13.5pt;color:#2C2CF0'>(</span><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>column-list</span></i><b><span style='color:#2C2CF0'> </span></b><b><span
  style='font-size:13.5pt;color:#2C2CF0'>)</span></b>]<b><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>select-statement</span></i></p>
  </td>
 </tr>
</table>

<p>The REPLACE command is an alias for the &quot;INSERT OR REPLACE&quot;
variant of the <a href="#insert">INSERT</a> command. This alias is provided for
compatibility with MySQL. See the <a href="#insert">INSERT</a> command
documentation for additional information.</p>

<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<h1><a name=select></a>SELECT</h1>

<table class=MsoNormalTable border=0 cellpadding=0>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>sql-statement</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='color:#2C2CF0'>SELECT </span></b>[<b><span
  style='color:#2C2CF0'>ALL </span></b><span style='font-size:13.5pt'>|</span><b><span
  style='color:#2C2CF0'> DISTINCT</span></b>]<b><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>result</span></i><b><span style='color:#2C2CF0'> </span></b>[<b><span
  style='color:#2C2CF0'>FROM </span></b><i><span style='color:#FF3434'>table-list</span></i>]<b><span
  style='color:#2C2CF0'><br>
  </span></b>[<b><span style='color:#2C2CF0'>WHERE </span></b><i><span
  style='color:#FF3434'>expr</span></i>]<b><span style='color:#2C2CF0'><br>
  </span></b>[<b><span style='color:#2C2CF0'>GROUP BY </span></b><i><span
  style='color:#FF3434'>expr-list</span></i>]<b><span style='color:#2C2CF0'><br>
  </span></b>[<b><span style='color:#2C2CF0'>HAVING </span></b><i><span
  style='color:#FF3434'>expr</span></i>]<b><span style='color:#2C2CF0'><br>
  </span></b>[<i><span style='color:#FF3434'>compound-op</span></i><b><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>select</span></i>]<span
  style='font-size:13.5pt'>*</span><b><span style='color:#2C2CF0'><br>
  </span></b>[<b><span style='color:#2C2CF0'>ORDER BY </span></b><i><span
  style='color:#FF3434'>sort-expr-list</span></i>]<b><span style='color:#2C2CF0'><br>
  </span></b>[<b><span style='color:#2C2CF0'>LIMIT </span></b><i><span
  style='color:#FF3434'>integer</span></i><b><span style='color:#2C2CF0'> </span></b>[(<b><span
  style='color:#2C2CF0'> OFFSET </span></b><span style='font-size:13.5pt'>|</span><b><span
  style='color:#2C2CF0'> </span></b><b><span style='font-size:13.5pt;
  color:#2C2CF0'>,</span><span style='color:#2C2CF0'> </span></b>)<b><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>integer</span></i>]]</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>result</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><i><span style='color:#FF3434'>result-column</span></i><b><span
  style='color:#2C2CF0'> </span></b>[<b><span style='font-size:13.5pt;
  color:#2C2CF0'>,</span><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>result-column</span></i>]<span style='font-size:13.5pt'>*</span></p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>result-column</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='font-size:13.5pt;color:#2C2CF0'>*</span><span
  style='color:#2C2CF0'> </span></b><span style='font-size:13.5pt'>|</span><b><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>table-name</span></i><b><span
  style='color:#2C2CF0'> </span></b><b><span style='font-size:13.5pt;
  color:#2C2CF0'>.</span><span style='color:#2C2CF0'> </span></b><b><span
  style='font-size:13.5pt;color:#2C2CF0'>*</span><span style='color:#2C2CF0'> </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>expr</span></i><b><span style='color:#2C2CF0'> </span></b>[<b><span
  style='color:#2C2CF0'> </span></b>[<b><span style='color:#2C2CF0'>AS</span></b>]<b><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>string</span></i><b><span
  style='color:#2C2CF0'> </span></b>]</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>table-list</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><i><span style='color:#FF3434'>table</span></i><b><span
  style='color:#2C2CF0'> </span></b>[<i><span style='color:#FF3434'>join-op</span></i><b><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>table</span></i><b><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>join-args</span></i>]<span
  style='font-size:13.5pt'>*</span></p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>table</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><i><span style='color:#FF3434'>table-name</span></i><b><span
  style='color:#2C2CF0'> </span></b>[<b><span style='color:#2C2CF0'>AS </span></b><i><span
  style='color:#FF3434'>alias</span></i>]<b><span style='color:#2C2CF0'> </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'><br>
  </span></b><b><span style='font-size:13.5pt;color:#2C2CF0'>(</span><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>select</span></i><b><span
  style='color:#2C2CF0'> </span></b><b><span style='font-size:13.5pt;
  color:#2C2CF0'>)</span><span style='color:#2C2CF0'> </span></b>[<b><span
  style='color:#2C2CF0'>AS </span></b><i><span style='color:#FF3434'>alias</span></i>]</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>join-op</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='font-size:13.5pt;color:#2C2CF0'>,</span><span
  style='color:#2C2CF0'> </span></b><span style='font-size:13.5pt'>|</span><b><span
  style='color:#2C2CF0'> </span></b>[<b><span style='color:#2C2CF0'>NATURAL</span></b>]<b><span
  style='color:#2C2CF0'> </span></b>[<b><span style='color:#2C2CF0'>LEFT </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'> RIGHT </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'> </span></b><b><span
   style='color:#2C2CF0'>FULL</span></b>]<b><span style='color:#2C2CF0'> </span></b>[<b><span
  style='color:#2C2CF0'>OUTER </span></b><span style='font-size:13.5pt'>|</span><b><span
  style='color:#2C2CF0'> INNER </span></b><span style='font-size:13.5pt'>|</span><b><span
  style='color:#2C2CF0'> CROSS</span></b>]<b><span style='color:#2C2CF0'> JOIN</span></b></p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>join-args</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal>[<b><span style='color:#2C2CF0'>ON </span></b><i><span
  style='color:#FF3434'>expr</span></i>]<b><span style='color:#2C2CF0'> </span></b>[<b><span
  style='color:#2C2CF0'>USING </span></b><b><span style='font-size:13.5pt;
  color:#2C2CF0'>(</span><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>id-list</span></i><b><span style='color:#2C2CF0'> </span></b><b><span
  style='font-size:13.5pt;color:#2C2CF0'>)</span></b>]</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>sort-expr-list</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><i><span style='color:#FF3434'>expr</span></i><b><span
  style='color:#2C2CF0'> </span></b>[<i><span style='color:#FF3434'>sort-order</span></i>]<b><span
  style='color:#2C2CF0'> </span></b>[<b><span style='font-size:13.5pt;
  color:#2C2CF0'>,</span><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>expr</span></i><b><span style='color:#2C2CF0'> </span></b>[<i><span
  style='color:#FF3434'>sort-order</span></i>]]<span style='font-size:13.5pt'>*</span></p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>sort-order</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal>[<b><span style='color:#2C2CF0'> COLLATE </span></b><i><span
  style='color:#FF3434'>collation-name</span></i><b><span style='color:#2C2CF0'>
  </span></b>]<b><span style='color:#2C2CF0'> </span></b>[<b><span
  style='color:#2C2CF0'> ASC </span></b><span style='font-size:13.5pt'>|</span><b><span
  style='color:#2C2CF0'> DESC </span></b>]</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>compound_op</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='color:#2C2CF0'>UNION </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'> UNION ALL </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'> INTERSECT </span></b><span
  style='font-size:13.5pt'>|</span><b><span style='color:#2C2CF0'> EXCEPT</span></b></p>
  </td>
 </tr>
</table>

<p>The SELECT statement is used to query the database. The result of a SELECT is
zero or more rows of data where each row has a fixed number of columns. The
number of columns in the result is specified by the expression list in between
the SELECT and FROM keywords. Any arbitrary expression can be used as a result.
If a result expression is <span style='font-size:13.5pt;color:#2C2CF0'>*</span>
then all columns of all tables are substituted for that one expression. If the
expression is the name of a table followed by <span style='font-size:13.5pt;
color:#2C2CF0'>.*</span> then the result is all columns in that one table.</p>

<p>The DISTINCT keyword causes a subset of result rows to be returned, in which
each result row is different. NULL values are not treated as distinct from each
other. The default behavior is that all result rows be returned, which can be
made explicit with the keyword ALL.</p>

<p>The query is executed against one or more tables specified after the FROM
keyword. If multiple tables names are separated by commas, then the query is
against the cross join of the various tables. The full SQL-92 join syntax can
also be used to specify joins. A sub-query in parentheses may be substituted for
any table name in the FROM clause. The entire FROM clause may be omitted, in
which case the result is a single row consisting of the values of the
expression list. </p>

<p>The WHERE clause can be used to limit the number of rows over which the
query operates.</p>

<p>The GROUP BY clauses causes one or more rows of the result to be combined
into a single row of output. This is especially useful when the result contains
aggregate functions. The expressions in the GROUP BY clause do <em>not</em>
have to be expressions that appear in the result. The HAVING clause is similar
to WHERE except that HAVING applies after grouping has occurred. The HAVING
expression may refer to values, even aggregate functions, that are not in the
result.</p>

<p>The ORDER BY clause causes the output rows to be sorted. The argument to
ORDER BY is a list of expressions that are used as the key for the sort. The
expressions do not have to be part of the result for a simple SELECT, but in a
compound SELECT each sort expression must exactly match one of the result columns.
Each sort expression may be optionally followed by a COLLATE keyword and the
name of a collating function used for ordering text and/or keywords ASC or DESC
to specify the sort order.</p>

<p>The LIMIT clause places an upper bound on the number of rows returned in the
result. A negative LIMIT indicates no upper bound. The optional OFFSET
following LIMIT specifies how many rows to skip at the beginning of the result
set. In a compound query, the LIMIT clause may only appear on the final SELECT
statement. The limit is applied to the entire query not to the individual
SELECT statement to which it is attached. Note that if the OFFSET keyword is
used in the LIMIT clause, then the limit is the first number and the offset is
the second number. If a comma is used instead of the OFFSET keyword, then the
offset is the first number and the limit is the second number. This seeming
contradition is intentional - it maximizes compatibility with legacy SQL
database systems. </p>

<p>A compound SELECT is formed from two or more simple SELECTs connected by one
of the operators UNION, UNION ALL, INTERSECT, or EXCEPT. In a compound SELECT,
all the constituent SELECTs must specify the same number of result columns.
There may be only a single ORDER BY clause at the end of the compound SELECT. The
UNION and UNION ALL operators combine the results of the SELECTs to the right
and left into a single big table. The difference is that in UNION all result
rows are distinct where in UNION ALL there may be duplicates. The INTERSECT
operator takes the intersection of the results of the left and right SELECTs.
EXCEPT takes the result of left SELECT after removing the results of the right
SELECT. When three are more SELECTs are connected into a compound, they group
from left to right.</p>

<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<h1><a name=update></a>UPDATE</h1>

<table class=MsoNormalTable border=0 cellpadding=0>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>sql-statement</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='color:#2C2CF0'>UPDATE </span></b>[<b><span
  style='color:#2C2CF0'> OR </span></b><i><span style='color:#FF3434'>conflict-algorithm</span></i><b><span
  style='color:#2C2CF0'> </span></b>]<b><span style='color:#2C2CF0'> </span></b>[<i><span
  style='color:#FF3434'>database-name</span></i><b><span style='color:#2C2CF0'>
  </span></b><b><span style='font-size:13.5pt;color:#2C2CF0'>.</span></b>]<b><span
  style='color:#2C2CF0'> </span></b><i><span style='color:#FF3434'>table-name</span></i><b><span
  style='color:#2C2CF0'><br>
  SET </span></b><i><span style='color:#FF3434'>assignment</span></i><b><span
  style='color:#2C2CF0'> </span></b>[<b><span style='font-size:13.5pt;
  color:#2C2CF0'>,</span><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>assignment</span></i>]<span style='font-size:13.5pt'>*</span><b><span
  style='color:#2C2CF0'><br>
  </span></b>[<b><span style='color:#2C2CF0'>WHERE </span></b><i><span
  style='color:#FF3434'>expr</span></i>]</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>assignment</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><i><span style='color:#FF3434'>column-name</span></i><b><span
  style='color:#2C2CF0'> </span></b><b><span style='font-size:13.5pt;
  color:#2C2CF0'>=</span><span style='color:#2C2CF0'> </span></b><i><span
  style='color:#FF3434'>expr</span></i></p>
  </td>
 </tr>
</table>

<p>The UPDATE statement is used to change the value of columns in selected rows
of a table. Each assignment in an UPDATE specifies a column name to the left of
the equals sign and an arbitrary expression to the right. The expressions may
use the values of other columns. All expressions are evaluated before any
assignments are made. A WHERE clause can be used to restrict which rows are
updated.</p>

<p>The optional conflict-clause allows the specification of an alternative
constraint conflict resolution algorithm to use during this one command. See
the section titled <a href="#conflict">ON CONFLICT</a> for additional
information.</p>

<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<h1><a name=vacuum></a>VACUUM</h1>

<table class=MsoNormalTable border=0 cellpadding=0>
 <tr>
  <td valign=top style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal align=right style='text-align:right'><i><span
  style='color:#FF3434'>sql-statement</span></i>&nbsp;::=</p>
  </td>
  <td style='padding:7.5pt 7.5pt 7.5pt 7.5pt'>
  <p class=MsoNormal><b><span style='color:#2C2CF0'>VACUUM </span></b>[<i><span
  style='color:#FF3434'>index-or-table-name</span></i>]</p>
  </td>
 </tr>
</table>

<p>The VACUUM command is an SQLite extension modeled after a similar command
found in PostgreSQL. If VACUUM is invoked with the name of a table or index then
it is suppose to clean up the named table or index. In version 1.0 of SQLite,
the VACUUM command would invoke <b>gdbm_reorganize()</b> to clean up the
backend database file.</p>

<p>VACUUM became a no-op when the GDBM backend was removed from SQLITE in
version 2.0.0. VACUUM was reimplemented in version 2.8.1. The index or table
name argument is now ignored. </p>

<p>When an object (table, index, or trigger) is dropped from the database, it
leaves behind empty space. This makes the database file larger than it needs to
be, but can speed up inserts. In time inserts and deletes can leave the
database file structure fragmented, which slows down disk access to the
database contents. The VACUUM command cleans the main database by copying its
contents to a temporary database file and reloading the original database file
from the copy. This eliminates free pages, aligns table data to be contiguous,
and otherwise cleans up the database file structure. It is not possible to
perform the same process on an attached database file.</p>

<p>This command will fail if there is an active transaction. This command has
no effect on an in-memory database.</p>

<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<h1><a name=keywords></a>SQLite keywords</h1>

<p>The following keywords are used by SQLite. Most are either reserved words in
SQL-92 or were listed as potential reserved words. Those which aren't are shown
in italics. Not all of these words are actually used by SQLite. Keywords are
not reserved in SQLite. Any keyword can be used as an identifier for SQLite
objects (columns, databases, indexes, tables, triggers, views, ...) but must
generally be enclosed by brackets or quotes to avoid confusing the parser.
Keyword matching in SQLite is case-insensitive.</p>

<p>Keywords can be used as identifiers in three ways:</p>

<table class=MsoNormalTable border=0 cellpadding=0>
 <tr>
  <td width="12%" style='width:12.0%;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>'keyword' </p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>Interpreted as a literal string if it occurs in a legal
  string context, otherwise as an identifier. </p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>&quot;keyword&quot; </p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>Interpreted as an identifier if it matches a known
  identifier and occurs in a legal identifier context, otherwise as a string. </p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>[keyword] </p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>Always interpreted as an identifier. (This notation is
  used by MS Access and SQL Server.) </p>
  </td>
 </tr>
</table>

<h2>Fallback Keywords</h2>

<p>These keywords can be used as identifiers for SQLite objects without
delimiters.</p>

<p><i>ABORT</i> &nbsp;&nbsp; AFTER &nbsp;&nbsp; ASC &nbsp;&nbsp; <i>ATTACH</i>
&nbsp;&nbsp; BEFORE &nbsp;&nbsp; BEGIN &nbsp;&nbsp; DEFERRED &nbsp;&nbsp;
CASCADE &nbsp;&nbsp; <i>CLU</i><i>STER</i> &nbsp;&nbsp; <i>CONFLICT</i>
&nbsp;&nbsp; <i>COPY</i> &nbsp;&nbsp; CROSS &nbsp;&nbsp; <i>DATAB</i><i>ASE</i>
&nbsp;&nbsp; <i>DELIMITERS</i> &nbsp;&nbsp; DESC &nbsp;&nbsp; <i>DETACH</i>
&nbsp;&nbsp; EACH &nbsp;&nbsp; END &nbsp;&nbsp; <i>EXPLAIN</i> &nbsp;&nbsp; <i>FAIL</i>
&nbsp;&nbsp; FOR &nbsp;&nbsp; FULL &nbsp;&nbsp; IGNORE &nbsp;&nbsp; IMMEDIATE
&nbsp;&nbsp; INITIALLY &nbsp;&nbsp; INNER &nbsp;&nbsp; <i>INSTEAD</i>
&nbsp;&nbsp; KEY &nbsp;&nbsp; LEFT &nbsp;&nbsp; MATCH &nbsp;&nbsp; NATURAL
&nbsp;&nbsp; OF &nbsp;&nbsp; <i>OFFSET</i> &nbsp;&nbsp; OUTER &nbsp;&nbsp; <i>PRAGMA</i>
&nbsp;&nbsp; <i>RAISE</i> &nbsp;&nbsp; <i>REPLACE</i> &nbsp;&nbsp; RESTRICT
&nbsp;&nbsp; RIGHT &nbsp;&nbsp; <i>ROW</i> &nbsp;&nbsp; <i>STATEMENT</i>
&nbsp;&nbsp; <i>TEMP</i> &nbsp;&nbsp; TEMPORARY &nbsp;&nbsp; TRIGGER
&nbsp;&nbsp; <i>VACUUM</i> &nbsp;&nbsp; VIEW &nbsp;&nbsp; </p>

<h2>Normal keywords</h2>

<p>These keywords can be used as identifiers for SQLite objects, but must be
enclosed in brackets or quotes for SQLite to recognize them as an identifier.</p>

<p>ALL &nbsp;&nbsp; AND &nbsp;&nbsp; AS &nbsp;&nbsp; BETWEEN &nbsp;&nbsp; BY
&nbsp;&nbsp; CASE &nbsp;&nbsp; CHECK &nbsp;&nbsp; COLLATE &nbsp;&nbsp; COMMIT
&nbsp;&nbsp; CONSTRAINT &nbsp;&nbsp; CREATE &nbsp;&nbsp; DEFAULT &nbsp;&nbsp;
DEFERRABLE &nbsp;&nbsp; DELETE &nbsp;&nbsp; DISTINCT &nbsp;&nbsp; DROP
&nbsp;&nbsp; ELSE &nbsp;&nbsp; EXCEPT &nbsp;&nbsp; FOREIGN &nbsp;&nbsp; FROM
&nbsp;&nbsp; <i>GLOB</i> &nbsp;&nbsp; GROUP &nbsp;&nbsp; HAVING &nbsp;&nbsp; IN
&nbsp;&nbsp; <i>INDEX</i> &nbsp;&nbsp; INSERT &nbsp;&nbsp; INTERSECT
&nbsp;&nbsp; INTO &nbsp;&nbsp; IS &nbsp;&nbsp; <i>ISNULL</i> &nbsp;&nbsp; JOIN
&nbsp;&nbsp; LIKE &nbsp;&nbsp; LIMIT &nbsp;&nbsp; NOT &nbsp;&nbsp; <i>NOTNULL</i>
&nbsp;&nbsp; NULL &nbsp;&nbsp; ON &nbsp;&nbsp; OR &nbsp;&nbsp; ORDER
&nbsp;&nbsp; PRIMARY &nbsp;&nbsp; REFERENCES &nbsp;&nbsp; ROLLBACK &nbsp;&nbsp;
SELECT &nbsp;&nbsp; SET &nbsp;&nbsp; TABLE &nbsp;&nbsp; THEN &nbsp;&nbsp;
TRANSACTION &nbsp;&nbsp; UNION &nbsp;&nbsp; UNIQUE &nbsp;&nbsp; UPDATE
&nbsp;&nbsp; USING &nbsp;&nbsp; VALUES &nbsp;&nbsp; WHEN &nbsp;&nbsp; WHERE
&nbsp;&nbsp; </p>

<h2>Special words</h2>

<p>The following are not keywords in SQLite, but are used as names of system
objects. They can be used as an identifier for a different type of object.</p>

<p><i>_ROWID_</i> &nbsp;&nbsp; <i>MAIN</i> &nbsp;&nbsp; OID &nbsp;&nbsp; <i>ROWID</i>
&nbsp;&nbsp; <i>SQLITE_MASTER</i> &nbsp;&nbsp; <i>SQLITE_TEMP_MASTER</i>
&nbsp;&nbsp; </p>

</div>

</body>

</html>
